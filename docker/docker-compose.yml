name: untidetech-browser

services:
    # Main API service
    mariadb:
        image: mariadb:10.11
        hostname: mariadb
        restart: on-failure
        ports:
            - '${MARIADB_PORT}:3306'
        environment:
            MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
            MARIADB_DATABASE: ${MARIADB_DATABASE}
            MARIADB_USER: ${MARIADB_USER}
            MARIADB_PASSWORD: ${MARIADB_PASSWORD}
        volumes:
            - mariadb_data:/var/lib/mysql
        networks:
            - app-network

    # # JWKS Server for token validation
    jwks-server:
        image: nginx:alpine
        hostname: jwks-server
        ports:
            - '${JWKS_SERVER_PORT}:80'
        volumes:
            - ../keys/jwks.json:/usr/share/nginx/html/.well-known/jwks.json
            - ../ci/jwks-server/jwks.conf:/etc/nginx/conf.d/default.conf
        networks:
            - app-network
        deploy:
            resources:
                limits:
                    cpus: '0.3'
                    memory: 128M
        healthcheck:
            test:
                [
                    'CMD',
                    'wget',
                    '-qO-',
                    'http://localhost:80/.well-known/jwks.json',
                ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 5s

    # Redis for caching and queues
    redis:
        image: redis:latest
        hostname: redis
        ports:
            - '${REDIS_PORT}:6379'
        volumes:
            - redis_data:/data
        networks:
            - app-network
        deploy:
            resources:
                limits:
                    cpus: '0.5'
                    memory: 256M
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 10s
            timeout: 30s
            retries: 5

    # Bull dashboard for queue monitoring
    redis-bullboard:
        image: deadly0/bull-board:3.2.6
        hostname: redis-bullboard
        ports:
            - ${BULLBOARD_PORT}:3000
        networks:
            - app-network
        environment:
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
            - BULL_PREFIX=${BULL_PREFIX}
            - USER_LOGIN=${USER_LOGIN}
            - USER_PASSWORD=${USER_PASSWORD}
        depends_on:
            - redis
        deploy:
            resources:
                limits:
                    cpus: '0.3'
                    memory: 128M

    # MongoDB Replica Set - Primary Node
    mongo:
        image: mongo:latest
        hostname: mongo
        ports:
            - '${MONGO_PORT}:27017'
        networks:
            - app-network
        volumes:
            - mongo_data:/data/db
        command: mongod --bind_ip_all --replSet rs0 --port 27017
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 1GB
        healthcheck:
            test: mongosh --eval "db.adminCommand('ping')" --quiet
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 20s

    # MongoDB Replica Set Initialization service
    mongo-init:
        image: mongo:latest
        restart: 'no'
        depends_on:
            mongo:
                condition: service_healthy
        networks:
            - app-network
        command: >
            bash -c "
            echo 'Waiting for MongoDB instance to be ready...' &&
            mongosh --host host.docker.internal:${MONGO_PORT} --eval '
            config = {
                    \"_id\": \"rs0\",
                    \"members\": [
                    { \"_id\": 0, \"host\": \"host.docker.internal:${MONGO_PORT}\", \"priority\": 1 }
                ]
            };
            rs.initiate(config);
            rs.status();'&&
            echo 'Single-node replica set initialized successfully. Container will exit now.'
            "
        deploy:
            restart_policy:
                condition: none

volumes:
    mongo_data:
    redis_data:
    mariadb_data:

networks:
    app-network:
        driver: bridge
